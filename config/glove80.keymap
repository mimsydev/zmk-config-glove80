/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include "../zmk-nodefree-config/helper.h"

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&trans      &trans  &trans  &trans  &trans                                                                                  &trans  &trans     &trans   &trans    &trans
&trans      &trans  &trans  &trans  &trans  &trans                                                               &trans  &trans  &trans     &trans   &trans       &trans
&kp TAB     &kp Q   &kp W   &kp F   &kp P   &kp B                                                                &kp J   &kp L   &kp U      &kp Y    &kp SEMI     &kp GRAVE
&caps_word  &hm LGUI A &hm_l LALT R &hm_l LCTRL S &hm_shift_l LSHIFT T &kp G                &kp M &hm_shift_r RSHIFT N &hm_r RCTRL E &hm_r RALT I    &hm RGUI O     &kp SQT
&kp ESC     &kp Z   &kp X   &kp C   &kp D   &kp V   &kp BACKSPACE  &kp DEL  &tog 2    &tog 1  &kp ENTER  &kp SPACE  &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &kp BSLH
&mo MAGIC   &trans  &trans  &trans  &trans          &mo 2          &trans   &trans    &trans  &kp INSERT &mo 1              &trans  &trans     &trans   &trans    &bootloader
            >;
        };

        lower_layer {
            bindings = <
&trans      &trans  &trans  &trans  &trans                                                                                  &trans  &trans     &trans   &trans    &trans
&trans      &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans     &trans   &trans    &trans
&kp F1      &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                                                                  &kp F7  &kp F8  &kp F9     &kp F10  &kp F11   &kp F12
&kp EQUAL   &hm LGUI N1 &hm_l LALT N2 &hm_l LCTRL N3 &hm_shift_l LSHIFT N4  &kp N5       &kp N6  &hm_shift_r RSHIFT N7 &hm_r RCTRL N8 &hm_r RALT N9 &hm RGUI N0    &MINUS
&none   &kp LEFT &kp UP  &kp DOWN &kp RIGHT &none       &trans     &trans   &tog 0    &tog 2  &trans     &trans     &none   &none   &none      &none    &none     &none
&trans      &trans  &trans  &trans  &trans              &mo 0      &trans   &trans    &trans  &trans     &mo 2              &trans  &trans     &trans   &trans    &trans
            >;
        };

        magic_layer {
            bindings = <
&trans      &trans    &trans    &trans    &trans                                                                              &trans   &trans   &trans    &trans    &trans
&trans      &trans    &trans    &trans    &trans    &trans                                                  &trans          &trans   &trans    &trans    &trans      &trans
&none       &kp LBRC  &kp LBKT  &kp RBKT  &kp RBRC  &none                                                   &kp KP_DIVIDE   &kp KP_7 &kp KP_8  &kp KP_9  &kp KP_MINUS &none
&none       &kp LT    &kp LPAR  &kp RPAR  &kp GT    &none                                                   &kp KP_MULTIPLY &kp KP_4 &kp KP_5  &kp KP_6  &kp KP_PLUS  &none
&none       &none     &none     &none     &none     &none   &trans     &trans   &tog 1    &tog 0  &trans    &trans    &none   &none   &none      &none     &none     &none
&trans      &trans    &trans    &trans    &trans            &mo 1      &trans   &trans    &trans  &trans    &mo 0             &trans   &trans    &trans    &trans    &trans
            >;
        };
    };
};
